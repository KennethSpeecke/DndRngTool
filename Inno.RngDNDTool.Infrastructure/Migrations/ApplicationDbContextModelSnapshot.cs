// <auto-generated />
using System;
using Inno.RngDNDTool.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inno.RngDNDTool.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Characters.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Acrobatics")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Allignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("int");

                    b.Property<int>("Arcana")
                        .HasColumnType("int");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("Athletics")
                        .HasColumnType("int");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bonds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWeightCarried")
                        .HasColumnType("int");

                    b.Property<int>("Deception")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<Guid>("EquipedArmorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipedMainHandWeaponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Flaws")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("History")
                        .HasColumnType("int");

                    b.Property<string>("Ideals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Initiative")
                        .HasColumnType("int");

                    b.Property<int>("InitiativeBonus")
                        .HasColumnType("int");

                    b.Property<int>("Insight")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Intimidation")
                        .HasColumnType("int");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Investigation")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEncumbered")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxCarryWeight")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Medicine")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nature")
                        .HasColumnType("int");

                    b.Property<int>("PassiveWisdom")
                        .HasColumnType("int");

                    b.Property<int>("Perception")
                        .HasColumnType("int");

                    b.Property<int>("Performance")
                        .HasColumnType("int");

                    b.Property<string>("PersonalTraits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Persuasion")
                        .HasColumnType("int");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("int");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<int>("RequiredMultiClassLevel")
                        .HasColumnType("int");

                    b.Property<int>("SleightOfHand")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Stealth")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Survival")
                        .HasColumnType("int");

                    b.Property<int>("TemporaryHitpoints")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipedArmorId");

                    b.HasIndex("EquipedMainHandWeaponId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29bcd574-1436-4a71-a750-4484d10cb105"),
                            Acrobatics = 5,
                            Age = 0,
                            Allignment = "Lawfull Evil",
                            AnimalHandling = 2,
                            Arcana = 1,
                            ArmorClass = 15,
                            Athletics = 0,
                            Background = "Acolyte",
                            Bonds = "I will someday get revenge on the corrupt temple hierarchy who branded me a heretic.",
                            Charisma = 8,
                            Constitution = 14,
                            CurrentHitPoints = 10,
                            CurrentWeightCarried = 0,
                            Deception = -1,
                            Dexterity = 17,
                            EquipedArmorId = new Guid("a66f53e9-605d-4ede-af78-f6cc985203ef"),
                            EquipedMainHandWeaponId = new Guid("8ecd50d4-9079-4428-9ec5-f45b5abce6c7"),
                            Experience = 0,
                            Flaws = "I am suspicious of strangers and expect the worst in them.",
                            History = 1,
                            Ideals = "Tradition. The ancient traditions of worship and sacrifice must be preserved and upheld.(Lawfull)",
                            Initiative = 0,
                            InitiativeBonus = 0,
                            Insight = 4,
                            Intelligence = 12,
                            Intimidation = -1,
                            InventoryId = new Guid("82b556d3-ecef-40d6-aaae-12bcf93592d2"),
                            Investigation = 1,
                            IsEncumbered = false,
                            Level = 1,
                            MaxCarryWeight = 100,
                            MaxHitPoints = 10,
                            Medicine = 2,
                            Name = "Copuul",
                            Nature = 1,
                            PassiveWisdom = 14,
                            Perception = 4,
                            Performance = -1,
                            PersonalTraits = "I see omens in every event and action. The gods try to speak to us, we just need to listen.",
                            Persuasion = -1,
                            ProficiencyBonus = 2,
                            Race = "Grung",
                            Religion = 3,
                            RequiredMultiClassLevel = 5,
                            SleightOfHand = 3,
                            Speed = 25,
                            Stealth = 5,
                            Strength = 10,
                            Survival = 2,
                            TemporaryHitpoints = 0,
                            Wisdom = 14
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.Abilities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Abilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("872f8b39-f29f-4e2e-ba7f-38a03ef6beb0"),
                            Description = "Beginning at 1st level, while you are wearing no armor and not wielding a shield, your AC equals 10 + your Dexterity modifier + your Wisdom modifier.",
                            Name = "Unarmored Defense",
                            RequiredLevel = 0
                        },
                        new
                        {
                            Id = new Guid("2fd61669-da9a-4e7f-9526-4ba764d8dcc5"),
                            Description = "At 1st level, your practice of martial arts gives you mastery of combat styles that use unarmed strikes and monk weapons, which are shortswords and any simple melee weapons that don’t have the two-handed or heavy property.You gain the following benefits while you are unarmed or wielding only monk weapons and you aren’t wearing armor or wielding a shield: You can use Dexterity instead of Strength for the attack and damage rolls of your unarmed strikes and monk weapons. You can roll a d4 in place of the normal damage of your unarmed strike or monk weapon.This die changes as you gain monk levels, as shown in the Martial Arts column of the Monk table. When you use the Attack action with an unarmed strike or a monk weapon on your turn, you can make one unarmed strike as a bonus action.For example, if you take the Attack action and attack with a quarterstaff, you can also make an unarmed strike as a bonus action, assuming you haven’t already taken a bonus action this turn.",
                            Name = "Martial Arts",
                            RequiredLevel = 1
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.Proficiencies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArmorProficiencies")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeaponProficiencies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Proficiencies");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Proficiencies");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CopperPieces")
                        .HasColumnType("int");

                    b.Property<int>("ElectrumPieces")
                        .HasColumnType("int");

                    b.Property<int>("GoldPieces")
                        .HasColumnType("int");

                    b.Property<Guid?>("NpcId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlatinumPieces")
                        .HasColumnType("int");

                    b.Property<int>("SilverPieces")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique()
                        .HasFilter("[CharacterId] IS NOT NULL");

                    b.HasIndex("NpcId")
                        .IsUnique()
                        .HasFilter("[NpcId] IS NOT NULL");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82b556d3-ecef-40d6-aaae-12bcf93592d2"),
                            CharacterId = new Guid("29bcd574-1436-4a71-a750-4484d10cb105"),
                            CopperPieces = 0,
                            ElectrumPieces = 0,
                            GoldPieces = 15,
                            PlatinumPieces = 0,
                            SilverPieces = 0
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Armor.Armor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("BodyPlacement")
                        .HasColumnType("int");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<double>("WeightInKg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodTypes")
                        .HasColumnType("int");

                    b.Property<string>("ItemImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<int>("StatusEffectDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("StatusEffectType")
                        .HasColumnType("int");

                    b.Property<int>("StatusEffectValue")
                        .HasColumnType("int");

                    b.Property<double>("WeightInKg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Potion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PotionType")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<int>("StatusEffectDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("StatusEffectValue")
                        .HasColumnType("int");

                    b.Property<double>("WeightInKg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Potions");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Scroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("RequiredDifficultyClass")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<Guid?>("SpellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WeightInKg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SpellId");

                    b.ToTable("Scrolls");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Weapons.Weapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<int>("DamageDice")
                        .HasColumnType("int");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<int>("WeaponType")
                        .HasColumnType("int");

                    b.Property<double>("WeightInKg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d382a917-c2a4-48a6-9529-81b24aae44a1"),
                            Description = "You can speak, read, and write Grung.",
                            Name = "Grung"
                        },
                        new
                        {
                            Id = new Guid("d0d5ee32-2be6-4e23-ad46-62af79029e27"),
                            Description = "You can speak, read, and write Common Tongue",
                            Name = "Common Tongue"
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Npcs.Base.Npc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Acrobatics")
                        .HasColumnType("int");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("int");

                    b.Property<int>("Arcana")
                        .HasColumnType("int");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("Athletics")
                        .HasColumnType("int");

                    b.Property<int>("BehaviorType")
                        .HasColumnType("int");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("Deception")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("History")
                        .HasColumnType("int");

                    b.Property<int>("Initiative")
                        .HasColumnType("int");

                    b.Property<int>("Insight")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Intimidation")
                        .HasColumnType("int");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Investigation")
                        .HasColumnType("int");

                    b.Property<int>("Medicine")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nature")
                        .HasColumnType("int");

                    b.Property<int>("PassiveWisdom")
                        .HasColumnType("int");

                    b.Property<int>("Perception")
                        .HasColumnType("int");

                    b.Property<int>("Performance")
                        .HasColumnType("int");

                    b.Property<int>("Persuasion")
                        .HasColumnType("int");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("int");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<int>("SleightOfHand")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Stealth")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Survival")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Npcs");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Races.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            Allignment = "Alignment. Most grungs are lawful, having been raised in a strict caste system. They tend toward evil as well, coming from a culture where social advancement occurs rarely, and most often because another member of your army has died and there is no one else of that caste to fill the vacancy.",
                            Description = "Grungs are aggressive froglike humanoids found in rain forests and tropical jungles. They are fiercely territorial and see themselves as superior to most other creatures.Grung society is a caste system. Each caste lays eggs in a separate hatching pool, and juvenile grungs join their caste upon emergence from the hatchery. All grungs are a dull greenish gray when they are born, but each individual takes on the color of its caste as it grows to adulthood. From lowest to highest caste, grungs can be green, blue, purple, red, orange, or gold.",
                            Name = "Grung"
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Spells.Base.BaseSpell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttackRadiusInMeters")
                        .HasColumnType("int");

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Concentration")
                        .HasColumnType("bit");

                    b.Property<int>("DamageRoll")
                        .HasColumnType("int");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredSavingThrowType")
                        .HasColumnType("int");

                    b.Property<bool>("Ritual")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Trait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trait");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3311af6-7b91-4071-b88a-b71c7758217d"),
                            Description = "Three traditions of monastic pursuit are common in the monasteries scattered across the multiverse. Most monasteries practice one tradition exclusively, but a few honor the three traditions and instruct each monk according to his or her aptitude and interest. All three traditions rely on the same basic techniques, diverging as the student grows more adept. Thus, a monk need choose a tradition only upon reaching 3rd level.",
                            Name = "Monastic Traditions"
                        },
                        new
                        {
                            Id = new Guid("d6d14ba3-d038-4322-9296-e9b5a4dcfd5c"),
                            Description = "Grungs mature to adulthood in a single year, but have been known to live up to 50 years.",
                            Name = "Age Grung"
                        },
                        new
                        {
                            Id = new Guid("184bc475-d47d-4e0f-a467-771298b01c68"),
                            Description = "Grungs stand between 2 ½ and 3 ½ feet tall and average about 30 pounds. Your size is Small.",
                            Name = "Size Grung"
                        },
                        new
                        {
                            Id = new Guid("c47f9f76-d53d-4fca-95dd-6c41cd1676f8"),
                            Description = "You can breathe air and water.",
                            Name = "Amphibious"
                        },
                        new
                        {
                            Id = new Guid("e0fc2d4d-127c-49bf-a170-ca3290d90eef"),
                            Description = "You are immune to poison damage and the poisoned condition.",
                            Name = "Poison Immunity"
                        },
                        new
                        {
                            Id = new Guid("0e1ca1b6-02e8-4c99-9e96-0c4c8fba046a"),
                            Description = "You have proficiency in the Perception skill.",
                            Name = "Arboreal Alertness"
                        },
                        new
                        {
                            Id = new Guid("ba06c2e8-2f32-48ba-bd1e-32c625ecd3d3"),
                            Description = "Any creature that grapples you or otherwise comes into direct contact with your skin must succeed on a DC 12 Constitution saving throw or become poisoned for 1 minute. A poisoned creature no longer in direct contact with you can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.You can also apply this poison to any piercing weapon as part of an attack with that weapon, though when you hit the poison reacts differently. The target must succeed on a DC 12 Constitution saving throw or take 2d4 poison damage.",
                            Name = "Poisonous Skin"
                        },
                        new
                        {
                            Id = new Guid("18d497dd-927a-4896-8844-0788118b818b"),
                            Description = "Your long jump is up to 25 feet and your high jump is up to 15 feet, with or without a running start.",
                            Name = "Standing Leap"
                        },
                        new
                        {
                            Id = new Guid("5256ab96-926d-4f40-a1fe-cc33660042c3"),
                            Description = "Your Dexterity score increases by 2 and your Constitution score increases by 1.",
                            Name = "Ability Score Increase"
                        },
                        new
                        {
                            Id = new Guid("cb0b5963-cf5f-41e8-92df-9dee989009e2"),
                            Description = "If you fail to immerse yourself in water for at least 1 hour during a day, you suffer 1 level of exhaustion at the end of that day. You can recover from this exhaustion only through magic or by immersing yourself in water for at least 1 hour.",
                            Name = "Water Dependency"
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndMaps.BaseMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseMap");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "faa97b2c-8771-4aea-b899-e560fd892455",
                            AccessFailedCount = 0,
                            Adress = "Default",
                            ConcurrencyStamp = "87110ee8-5852-4f5c-b9ed-4fb646455e0e",
                            Email = "Rng@Admin.rng",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Super",
                            LockoutEnabled = false,
                            NormalizedEmail = "RNG@ADMIN.RNG",
                            NormalizedUserName = "RNGADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEK4YcWLeeV9N1xjPBa3ENkeTB+UVfHXypjwEm36zY9yNM76dq2ZStiKx7/AmEEOhyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72b2da2b-dd32-40d1-8a95-addda872b62e",
                            TwoFactorEnabled = false,
                            UserName = "RngAdmin"
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.ApplicationUserCharacters", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("ApplicationUserCharacters");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.ApplicationUserMaps", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("ApplicationUserMaps");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterClassesAbilities", b =>
                {
                    b.Property<Guid>("AbilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbilityId", "CharacterClassId");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("CharacterClassesAbilities");

                    b.HasData(
                        new
                        {
                            AbilityId = new Guid("872f8b39-f29f-4e2e-ba7f-38a03ef6beb0"),
                            CharacterClassId = new Guid("776c058d-0aa4-4051-a9d9-18438b4a3523")
                        },
                        new
                        {
                            AbilityId = new Guid("2fd61669-da9a-4e7f-9526-4ba764d8dcc5"),
                            CharacterClassId = new Guid("776c058d-0aa4-4051-a9d9-18438b4a3523")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterClassesTraits", b =>
                {
                    b.Property<Guid>("TraitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TraitId", "CharacterClassId");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("CharacterClassesTraits");

                    b.HasData(
                        new
                        {
                            TraitId = new Guid("f3311af6-7b91-4071-b88a-b71c7758217d"),
                            CharacterClassId = new Guid("776c058d-0aa4-4051-a9d9-18438b4a3523")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterClassLanguages", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguageId", "CharacterClassId");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("CharacterClassLanguages");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterRaces", b =>
                {
                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RaceId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterRaces");

                    b.HasData(
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            CharacterId = new Guid("29bcd574-1436-4a71-a750-4484d10cb105")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharactersClasses", b =>
                {
                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CharacterClassId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharactersClasses");

                    b.HasData(
                        new
                        {
                            CharacterClassId = new Guid("776c058d-0aa4-4051-a9d9-18438b4a3523"),
                            CharacterId = new Guid("29bcd574-1436-4a71-a750-4484d10cb105")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterSpells", b =>
                {
                    b.Property<Guid>("SpellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpellId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterSpells");

                    b.HasData(
                        new
                        {
                            SpellId = new Guid("c16a9a18-a96d-47fe-a49e-0ee0088e7e2d"),
                            CharacterId = new Guid("29bcd574-1436-4a71-a750-4484d10cb105")
                        },
                        new
                        {
                            SpellId = new Guid("9fcd8482-df14-4e47-8433-ffae30e74735"),
                            CharacterId = new Guid("29bcd574-1436-4a71-a750-4484d10cb105")
                        },
                        new
                        {
                            SpellId = new Guid("6e42ce23-9081-4b91-b38d-a77f1436baff"),
                            CharacterId = new Guid("29bcd574-1436-4a71-a750-4484d10cb105")
                        },
                        new
                        {
                            SpellId = new Guid("d12be89a-e0df-441f-b1c2-4f91557b4d1c"),
                            CharacterId = new Guid("29bcd574-1436-4a71-a750-4484d10cb105")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryArmors", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArmorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsEquiped")
                        .HasColumnType("bit");

                    b.HasKey("InventoryId", "ArmorId");

                    b.HasIndex("ArmorId");

                    b.ToTable("InventoryArmors");

                    b.HasData(
                        new
                        {
                            InventoryId = new Guid("82b556d3-ecef-40d6-aaae-12bcf93592d2"),
                            ArmorId = new Guid("a66f53e9-605d-4ede-af78-f6cc985203ef")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryFoods", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsConsumed")
                        .HasColumnType("bit");

                    b.HasKey("InventoryId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("InventoryFoods");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryPotions", b =>
                {
                    b.Property<Guid>("PotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsConsumed")
                        .HasColumnType("bit");

                    b.HasKey("PotionId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryPotions");

                    b.HasData(
                        new
                        {
                            PotionId = new Guid("b9f5c577-d2f8-4c39-ade1-ba5f33684dca"),
                            InventoryId = new Guid("82b556d3-ecef-40d6-aaae-12bcf93592d2")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryScrolls", b =>
                {
                    b.Property<Guid>("ScrollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsConsumed")
                        .HasColumnType("bit");

                    b.HasKey("ScrollId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryScrolls");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryWeapons", b =>
                {
                    b.Property<Guid>("WeaponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsEquiped")
                        .HasColumnType("bit");

                    b.HasKey("WeaponId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryWeapons");

                    b.HasData(
                        new
                        {
                            WeaponId = new Guid("8ecd50d4-9079-4428-9ec5-f45b5abce6c7"),
                            InventoryId = new Guid("82b556d3-ecef-40d6-aaae-12bcf93592d2")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.NpcClasses", b =>
                {
                    b.Property<Guid>("NpcId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NpcId", "CharacterClassId");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("NpcClasses");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.NpcSpells", b =>
                {
                    b.Property<Guid>("SpellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NpcId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpellId", "NpcId");

                    b.HasIndex("NpcId");

                    b.ToTable("NpcSpells");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.RacesLanguages", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguageId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("RacesLanguages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("d382a917-c2a4-48a6-9529-81b24aae44a1"),
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f")
                        },
                        new
                        {
                            LanguageId = new Guid("d0d5ee32-2be6-4e23-ad46-62af79029e27"),
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f")
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.RaceTraits", b =>
                {
                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RaceId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("RaceTraits");

                    b.HasData(
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("d6d14ba3-d038-4322-9296-e9b5a4dcfd5c")
                        },
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("184bc475-d47d-4e0f-a467-771298b01c68")
                        },
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("c47f9f76-d53d-4fca-95dd-6c41cd1676f8")
                        },
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("e0fc2d4d-127c-49bf-a170-ca3290d90eef")
                        },
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("0e1ca1b6-02e8-4c99-9e96-0c4c8fba046a")
                        },
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("ba06c2e8-2f32-48ba-bd1e-32c625ecd3d3")
                        },
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("18d497dd-927a-4896-8844-0788118b818b")
                        },
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("5256ab96-926d-4f40-a1fe-cc33660042c3")
                        },
                        new
                        {
                            RaceId = new Guid("97398aed-9dd3-48b3-9689-9dd455db396f"),
                            TraitId = new Guid("cb0b5963-cf5f-41e8-92df-9dee989009e2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "48EECD0F-9D00-401C-A96C-C75F9C1ABBEA",
                            ConcurrencyStamp = "2a1bdc2d-4243-49ff-a6ea-08923ecbb3d5",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "faa97b2c-8771-4aea-b899-e560fd892455",
                            RoleId = "48EECD0F-9D00-401C-A96C-C75F9C1ABBEA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CoreClass", b =>
                {
                    b.HasBaseType("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.Proficiencies");

                    b.Property<int>("HitDice")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CoreClass");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CharacterClass", b =>
                {
                    b.HasBaseType("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CoreClass");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CharacterClass");

                    b.HasData(
                        new
                        {
                            Id = new Guid("776c058d-0aa4-4051-a9d9-18438b4a3523"),
                            ArmorProficiencies = 2,
                            WeaponProficiencies = 0,
                            HitDice = 8,
                            HitPoints = 8,
                            Description = "Whatever their discipline, monks are united in their ability to magically harness the energy that flows in their bodies. Whether channeled as a striking display of combat prowess or a subtler focus of defensive ability and speed, this energy infuses all that a monk does.",
                            Name = "Monk"
                        });
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Characters.Character", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Armor.Armor", "EquipedArmor")
                        .WithMany()
                        .HasForeignKey("EquipedArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Weapons.Weapon", "EquipedMainHandWeapon")
                        .WithMany()
                        .HasForeignKey("EquipedMainHandWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipedArmor");

                    b.Navigation("EquipedMainHandWeapon");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Characters.Character", "Character")
                        .WithOne("Inventory")
                        .HasForeignKey("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", "CharacterId");

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Npcs.Base.Npc", "Npc")
                        .WithOne("Inventory")
                        .HasForeignKey("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", "NpcId");

                    b.Navigation("Character");

                    b.Navigation("Npc");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Scroll", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Spells.Base.BaseSpell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.ApplicationUserCharacters", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserCharacters")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Characters.Character", "Character")
                        .WithMany("ApplicationUserCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.ApplicationUserMaps", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserMaps")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndMaps.BaseMap", "Map")
                        .WithMany("ApplicationUserMaps")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterClassesAbilities", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.Abilities", "Ability")
                        .WithMany("CharacterClassesAbilities")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CharacterClass", "CharacterClass")
                        .WithMany("CharacterClassesAbilities")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterClassesTraits", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CharacterClass", "CharacterClass")
                        .WithMany("CharacterClassesTraits")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Trait", "Trait")
                        .WithMany("CharacterClassesTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterClassLanguages", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CharacterClass", "CharacterClass")
                        .WithMany("CharacterClassLanguages")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Language", "Language")
                        .WithMany("CharacterClassLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterRaces", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Characters.Character", "Character")
                        .WithMany("CharacterRaces")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Races.Race", "Race")
                        .WithMany("CharacterRaces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharactersClasses", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CharacterClass", "CharacterClass")
                        .WithMany("CharactersClasses")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Characters.Character", "Character")
                        .WithMany("CharactersClasses")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.CharacterSpells", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Characters.Character", "Character")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Spells.Base.BaseSpell", "Spell")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryArmors", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Armor.Armor", "Armor")
                        .WithMany("InventoryArmors")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", "Inventory")
                        .WithMany("InventoryArmors")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armor");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryFoods", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Food", "Food")
                        .WithMany("InventoryFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", "Inventory")
                        .WithMany("InventoryFoods")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryPotions", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", "Inventory")
                        .WithMany("InventoryPotions")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Potion", "Potion")
                        .WithMany("InventoryPotions")
                        .HasForeignKey("PotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Potion");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryScrolls", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", "Inventory")
                        .WithMany("InventoryScrolls")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Scroll", "Scroll")
                        .WithMany("InventoryScrolls")
                        .HasForeignKey("ScrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Scroll");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.InventoryWeapons", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", "Inventory")
                        .WithMany("InventoryWeapons")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Weapons.Weapon", "Weapon")
                        .WithMany("InventoryWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.NpcClasses", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CharacterClass", "CharacterClass")
                        .WithMany("NpcClasses")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Npcs.Base.Npc", "Npc")
                        .WithMany("NpcClasses")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");

                    b.Navigation("Npc");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.NpcSpells", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Npcs.Base.Npc", "Npc")
                        .WithMany("NpcSpells")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Spells.Base.BaseSpell", "Spell")
                        .WithMany("NpcSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Npc");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.RacesLanguages", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Language", "Language")
                        .WithMany("RacesLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Races.Race", "Race")
                        .WithMany("RacesLanguages")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Joins.RaceTraits", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Races.Race", "Race")
                        .WithMany("RaceTraits")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.DndEntities.Trait", "Trait")
                        .WithMany("RaceTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inno.RngDNDTool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Inno.RngDNDTool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Characters.Character", b =>
                {
                    b.Navigation("ApplicationUserCharacters");

                    b.Navigation("CharacterRaces");

                    b.Navigation("CharacterSpells");

                    b.Navigation("CharactersClasses");

                    b.Navigation("Inventory")
                        .IsRequired();
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.Abilities", b =>
                {
                    b.Navigation("CharacterClassesAbilities");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Inventories.Base.Inventory", b =>
                {
                    b.Navigation("InventoryArmors");

                    b.Navigation("InventoryFoods");

                    b.Navigation("InventoryPotions");

                    b.Navigation("InventoryScrolls");

                    b.Navigation("InventoryWeapons");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Armor.Armor", b =>
                {
                    b.Navigation("InventoryArmors");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Food", b =>
                {
                    b.Navigation("InventoryFoods");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Potion", b =>
                {
                    b.Navigation("InventoryPotions");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Consumables.Scroll", b =>
                {
                    b.Navigation("InventoryScrolls");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Items.Weapons.Weapon", b =>
                {
                    b.Navigation("InventoryWeapons");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Language", b =>
                {
                    b.Navigation("CharacterClassLanguages");

                    b.Navigation("RacesLanguages");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Npcs.Base.Npc", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("NpcClasses");

                    b.Navigation("NpcSpells");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Races.Race", b =>
                {
                    b.Navigation("CharacterRaces");

                    b.Navigation("RaceTraits");

                    b.Navigation("RacesLanguages");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Spells.Base.BaseSpell", b =>
                {
                    b.Navigation("CharacterSpells");

                    b.Navigation("NpcSpells");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Trait", b =>
                {
                    b.Navigation("CharacterClassesTraits");

                    b.Navigation("RaceTraits");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndMaps.BaseMap", b =>
                {
                    b.Navigation("ApplicationUserMaps");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserCharacters");

                    b.Navigation("ApplicationUserMaps");
                });

            modelBuilder.Entity("Inno.RngDNDTool.Core.Entities.DndEntities.Classes.CharacterClass", b =>
                {
                    b.Navigation("CharacterClassLanguages");

                    b.Navigation("CharacterClassesAbilities");

                    b.Navigation("CharacterClassesTraits");

                    b.Navigation("CharactersClasses");

                    b.Navigation("NpcClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
